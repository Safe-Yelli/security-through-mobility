---
title: Analysing bus network in bangalore to discover pertinent smaller, newer routes
date: 2022-12-12
date-modified: 2022-12-15
execute:
  echo: false
  warning: false
format:
    pdf:
      fig-width: 8
      fig-height: 10
    html:
      embed-resources: true
      page-layout: full
geometry: margin=2cm
fig-cap-location: top
---
:::{ .style }
<style>
  .sticky-chunk .cell-output-display {
    overflow-x: unset !important;
}

.sticky-chunk{
    position: -webkit-sticky; /* Safari */
    position: sticky !important;
    top: 0;

    width: 100%;
  }

  

  #toc{
    position: relative;
    height: 10vh;
    margin-bottom: 3em;
    padding: 2em 0em;
    top: 10!important;
    z-index: 1000
  }
  #map{
    height: 100vh;
  }
  #title-block-header{
    padding: 5em 1em 0 1em;
  }

  #toc > ul{
    padding-left: 1rem;
    background-color: #f1f1f1;
    border-radius: 10pt;
    
  }
  #toc li{
    display: inline-block;
  }

  #toc li:after{
    content: " | ";
  }

  .toc li a:active{
    color: #73bd67
  }

  .figure-caption{
    text-align: center
  }
</style>
:::
::: { #toc .sticky-chunk .translate-middle. .px-auto}

- [Context](#context)
- [Problem Statement](#problem-statement)
- [Avant-garde routing](#avant-garde-routing)
- [Analysing the Network](#analysing-the-network)
- [Interactive Possibilities](#interactive-possibilities)

:::
::: { .grid .text-container}

::: {.g-col-lg-4 .g-col-md-4  .g-col-sm-12 .g-col-12 .px-md-3 .mx-sm-auto}

## Context
- Women face a lot of issues with accessibility through the lens of safety on roads. [^3]
    - SafeYelli [^4] has been documenting it for over a year. So have SafeCity [^5], SafetyPin [^6] and other solutions
- Safety and access to **public spaces in the city are negotiated for accessibility to the self by women** [^7]

### Motivations to design with
- **Crime Prevention Through Environment Design** (CPTED) is something that can be used to redesign bustands as safety islands as opposed to the City's initative to build safety islands  [^1]
- **Constant life and movement** should be encouraged by **mixed activites.** Bus Stands in India are already full of mixed activites, but can it be **formally encouraged**? [^2]
- **Feeder busses would encourage constant activity**. [Need Citation]
- A data visualisation to **realise the areas that are not covered by existing bus routes and would be helped by feeder busses. A system?** could be created. 
- What new methods exist to understanding a complex routing system? Through [SFNetworks](https://luukvdmeer.github.io/sfnetworks) and [STPlanner](https://github.com/ropensci/stplanr) packages for R.

## Problem statement
- Smaller or no Bus travel roads need to have busses running through them. Like on the inner roads of Ylk New Town.
- What are these roads that the BMTC needs to run new routes on?
    - Are they based on population density?
    - Are they based on the number of workplaces nearby?
    - Are there a lot of long distance travellers? Do migrants stay in housing that is far away?
    - Are these roads deserted after a certain time?

## Avant-garde routing
- What if i ignore residential zoning and route public transport through them.
- Would this not reduce private vehicle traffic possibly?


## Analysing the network
### Algorithm as i see it
- Load both layers (Bus routes and existing network)
- Find intersecting roads or roads that satisfy a filter within a radius
    - Filter out roads that do not have a bus route
      - Filter/Weight based on population, school density, work-place density, etc

```{r libs}
library(sfnetworks)
library(igraph)
library(tidygraph)
library(osmdata)
library(sf)
library(ggplot2)
library(geojsonio)
library(geojsonsf) #blazing fast but causes CRS issues, geojsonio handles fine
library(tidyverse)
```

```{r load-download-data}
## Attempt to download from OSM, downloading from OverPass turbo returns more data with the same query
# bbox <- c(77.534809,13.015934,77.646218,13.070535)
# bloreRoads <- opq(bbox ) %>%
#     add_osm_feature(key = 'highway', value = c( "street", "primary", "primary_link", "secondary_link","secondary", "road")
#     ) %>%
#     osmdata_sf()%>%
#     osm_poly2line()
#     st_geometry() %>%
#     st_write('roads.shp') # Convert to SF


bloreRoadsSmall <- geojsonsf::geojson_sf('assets/osm-data/unclassified-livingStreets.geojson') %>%
    select(geometry)

bloreRoadsSecondary <- geojsonsf::geojson_sf('assets/osm-data/secondary-tertiary-roads.geojson') %>%
    select(geometry)

busRoutes <- geojsonsf::geojson_sf('kgis-api/bus-routes.geojson') %>%
     st_transform(st_crs(bloreRoadsSecondary)) %>%
    select(OBJECTID, KGISBMTCRootName, geometry)

busStops <- geojsonsf::geojson_sf('kgis-api/busstops.geojson')%>%
    st_transform(st_crs(busRoutes))
```

```{r rounding}
st_geometry(bloreRoadsSecondary) <- st_geometry(bloreRoadsSecondary) %>%
  lapply(function(x) round(x, 3)) %>%
  st_sfc(crs = st_crs(bloreRoadsSecondary))

st_geometry(bloreRoadsSmall) <- st_geometry(bloreRoadsSmall) %>%
  lapply(function(x) round(x, 3)) %>%
  st_sfc(crs = st_crs(bloreRoadsSecondary))

st_geometry(busRoutes) <- st_cast(busRoutes, "LINESTRING") %>%
  st_geometry() %>%
  lapply(function(x) round(x, 3)) %>%
  st_sfc(crs = st_crs(bloreRoadsSecondary))

```

```{r sfnetwork-objs}
busRoutes <- busRoutes %>%
    st_cast("LINESTRING") %>%
    as_sfnetwork()
bloreRoadsSecondary <- bloreRoadsSecondary %>%
    as_sfnetwork()
bloreRoadsSmall <- bloreRoadsSmall %>%
    as_sfnetwork()
busStops <- busStops %>%
    as_sfnetwork()
```

```{r simplify}
# | eval: false
# library(dbscan)
# Retrieve the coordinates of the nodes.
# Cluster the nodes with the DBSCAN spatial clustering algorithm.
# We set eps = 0.5 such that:
# Nodes within a distance of 0.5 from each other will be in the same cluster.
# We set minPts = 1 such that:
# A node is assigned a cluster even if it is the only member of that cluster.
# Add the cluster information to the nodes of the network.

# busRoutesClustered <- busRoutes %>%
#   activate("nodes") %>%
#   st_coordinates()

# busRoutesClustered <- dbscan(busRoutesClustered, eps = 0.5, minPts = 1)$cluster

# busRoutes_1 <- busRoutes %>%
#   activate("nodes") %>%
#   mutate(cls = busRoutesClustered) %>%
#   convert(to_spatial_smooth)

# bloreRoadsSecondaryClustered <- bloreRoadsSecondary %>%
#   activate("nodes") %>%
#   st_coordinates()

# bloreRoadsSecondaryClustered <-  dbscan(bloreRoadsSecondaryClustered, eps = 0.5, minPts = 1)$cluster

# bloreRoadsSecondary_1 <- bloreRoadsSecondary %>%
#   activate("nodes") %>%
#   mutate(cls = bloreRoadsSecondaryClustered)%>%
#   convert(to_spatial_smooth)
```


#### Algorithms to understand
- I need to snap the nodes of the road network to the bus network for they both seem to vary in minuscule amounts that prevents filters from functioning properly
  - Filter out roads that do not have a bus route

## Interactive possibilities
- Release this as a tool for Planning agencies?
- Enable visual interface for easing usage for those who do not have techinical knsow-how

```{r snap-nearest}
#| eval: false


nearestNodes = st_nearest_feature(roads %>% activate("nodes"), busRoutes)

snappedRoads <- roads %>%
  st_set_geometry(st_geometry(busRoutes)[nearestNodes])

plot(snappedRoads)

```

```{r detect-intersects}

#| layout-ncol: 2
#| label: Combining
#| fig-subcap:
#|      - Road Network + Bus network
#|      - Roads with no bus routes

# plot(st_geometry(roads, "edges"))
# plot(st_geometry(busRoutes, "edges"),col="red", add=TRUE)
roads <- st_join(bloreRoadsSecondary, bloreRoadsSmall)
filteredRoads <- roads %>%
            activate("edges") %>%
            filter(edge_intersects((busRoutes)))
negateFilteredRoads <- roads %>%
  activate("edges") %>%
  mutate(busRouteIntersecting = edge_touches((busRoutes))) %>%
  select(!busRouteIntersecting)


negateFilteredRoads_nearBusStop = negateFilteredRoads %>%
  activate("nodes") %>%
  st_filter(busStops, .predicate = st_is_within_distance, dist = 400)
```
```{r plot-as-is}
#| label: Existing network
#| fig-cap: Road and Bus Networks
#| fig-subcap:
#|      - Road Network from openstreetmap.org
#|      - Bus Route Network from KGIS server
#|      - Roads with busses running through them (black) and those without (red). Some roads are 300mts near a bus stop and can be ignored. Please note that this distance is calculated as a radial distance and not measured through the road network


plot(roads, col="red", lwd= 0.5)
plot(busRoutes, col="red", lwd= 0.5)
plot(st_geometry(negateFilteredRoads, "edges"), col="red", bg="#2c2c2c")
plot(st_geometry(negateFilteredRoads_nearBusStop, "edges"), col="green", add=TRUE)
plot(st_geometry(filteredRoads, "edges"), add=TRUE)
#plot(busStops,draw_lines = FALSE, col="grey", add=TRUE)
```

```{r export-to-ojs}
#https://stackoverflow.com/questions/66268876/how-to-export-shp-file-after-spatial-networks-in-r-with-sf-and-tidygraph

filteredRoadsOJS<-filteredRoads %>%
  morph(to_spatial_simple) %>%
  unmorph() %>%
  activate("edges") %>%
  as_tibble() %>%
  st_as_sf() %>%
  sf_geojson()
negateFilteredRoadsOJS<-negateFilteredRoads %>%
  morph(to_spatial_simple) %>%
  unmorph() %>%
  activate("edges") %>%
  as_tibble() %>%
  st_as_sf() %>%
  sf_geojson()
busRoutesOJS<-busRoutes %>%
  morph(to_spatial_simple) %>%
  unmorph() %>%
  activate("edges") %>%
  as_tibble() %>%
  st_as_sf() %>%
  sf_geojson()
ojs_define(filteredRoadsOJS = filteredRoadsOJS)
ojs_define(negateFilteredRoadsOJS=negateFilteredRoadsOJS)
ojs_define(busRoutes = busRoutesOJS)
```
:::

::: { .g-col-lg-8 .g-col-md-8 .g-col-sm-12 .g-col-12 .sticky-chunk .px-md-3 .px-sm-1 #map }
```{ojs}
L = require('leaflet@1.9.3')


html`<link href='${resolve('leaflet@1.9.3/dist/leaflet.css')}' rel='stylesheet' />`



map = {

  // In Observable, we instead create a div from scratch in this cell, so it's
  // completely self-contained.
  let container = DOM.element('div', { style: `width: auto;height:100vh` });

  // Note that I'm yielding the container pretty early here: this allows the
  // div to be placed on the page.
  yield container;

  let map = L.map(container).setView([12.967562,77.591629], 11);

  // base map
  let osmLayer = L.tileLayer('https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}@2x.png', {
      attribution: 'Wikimedia maps beta | &copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
  }).addTo(map)

  // Overlay Layers
  let roadsNoBusLayer = L.geoJson(JSON.parse(filteredRoadsOJS),{
    color: 'red'
  }).addTo(map)
  let roadsBusStopNearLayer = L.geoJson(JSON.parse(negateFilteredRoadsOJS),{
    color: 'green'
  })
  let busRoute = L.geoJson(JSON.parse(busRoutes),{
    color: 'white'
  })
  var baseLayers = {
    "wiki-osm" : osmLayer,
  }
  var overlayMaps = {
    "Roads with no bus routes": roadsNoBusLayer,
    "Roads with bus routes within 300mts": roadsBusStopNearLayer,
    "Exisiting bus routes": busRoute
    //"All bus routes": busRoutes
  };

  var layerControl = L.control.layers(baseLayers, overlayMaps).addTo(map);

}
```
:::
:::

 [^1]: Iqbal, Asifa, and Vania Ceccato. "Is CPTED useful to guide the inventory of safety in parks? A study case in Stockholm, Sweden." _International criminal justice review_ 26, no. 2 (2016): 150-168.
 [^2]: Jacobs, Jane. "Jane jacobs." _The Death and Life of Great American Cities_ 21, no. 1 (1961): 13-25.
 [^3]: Gardner, Carol Brooks. _Passing by: Gender and public harassment_. Univ of California Press, 1995.
 [^4]: “Documenting Street Harassment in Bengaluru.” Safe Yelli in Bengaluru? Accessed December 5, 2022. https://safeyelli.in/. The SafeYelli project is led by me and has informed all of my contextual knowledge on safety that I might imply
 [^5]: Safecity. https://www.safecity.in/.
 [^6]: “Safetipin, Creating Safe Public Spaces for Women.” Safetipin. Accessed December 5, 2022. https://safetipin.com/.
 [^7]: Paul, Tanusree. "Public Spaces and Everyday Lives: Gendered Encounters in the Metro City of Kolkata." In _Doing Gender, Doing Geography_, pp. 264-283. Routledge India, 2012.
 [^8]: Anwar, Sajjad. “Mapping Public Transit in Bangalore.” Mapbox Blog. MapBox, June 29, 2017. https://blog.mapbox.com/mapping-public-transit-in-bangalore-32cb80d18e02.
 [^9]: Stadler, Timo, Simon Hofmeister, and Jan Dunnweber. “Hawaii International Conference on System Sciences.” In _A Method for the Optimized Placement of Bus Stops Based on Voronoi Diagram_, n.d. https://scholarspace.manoa.hawaii.edu/server/api/core/bitstreams/0fb14ccf-a5dd-4660-8b56-ceab7f9c1a2b/content.
[^10]: “Home - Bureau of Indian Standards.” Accessed December 5, 2022. https://www.bis.gov.in/.